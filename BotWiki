#! /usr/bin/php -q
<?php
require_once('Snoopy.class.php');

class Botwiki {
    public  $snoopy;
/*  =======================================================
                 Colores
    =========================================================*/
public $colorVerde = "\033[1;32m";
public $colorRojo = "\033[1;31m";
public $colorBlancoB = "\033[1;37m";
public $colorTurquesa = "\033[1;36m";
public $colorRosa = "\033[1;35m";
public $colorMagenta = "\033[0;35m";
public $colorAmarillo = "\033[1;33m";
public $finColor = "\033[0m";
public $usuario = "Miguillen-bot";
public $contrasenna = "jander01";

	/************************************************************************************************************************
	* Constructor de objetos de la clase Botwiki
	*
	*************************************************************************************************************************/
    public function Botwiki(){
        $this->snoopy = new Snoopy; // Objeto de la clase Snoopy
	}
	
	/************************************************************************************************************************
	* Método para el login en Wikipdia
	*
	*************************************************************************************************************************/
    public function login($usuario, $contrasenna) {
        $request_vars = array('action' => 'login', 'lgname' => $usuario, 
	                          'lgpassword' => $contrasenna, 'format' => 'php'
							  );
	    if(!$this->snoopy->submit("http://es.wikipedia.org/w/api.php", $request_vars)) 
	        die("Snoopy error: {$this->snoopy->error}");
		
		$this->snoopy->setcookies(); 
		$array_ = unserialize($this->snoopy->results); // Guardamos lo que nos devuelve la API en un array en $array_
	    $request_vars = array('action' => 'login', 'lgname' => $usuario, 
	                           'lgpassword' => $contrasenna,'lgtoken'=>$array_['login']['token'].'', 'format' => 'php');
	    if(!$this->snoopy->submit("http://es.wikipedia.org/w/api.php", $request_vars)) 
	        die("Snoopy error: {$snoopy->error}");
		$this->snoopy->setcookies();
		$array_ = unserialize($this->snoopy->results);
		//var_dump($array_); // Nos dice todo lo que nos ha devuelto wikipedia
		$this->snoopy->setcookies(); // Es imprescindible para realizar las acciones con el usuario del bot.
		if($array_["login"]["result"]== "Success") {
	        echo "\033[1;32m Iniciada sesión en es:Wikipedia \033[0m\r\n";	
        } else {
	        echo "\033[1;31m Error de inicio de sesión en es:Wikipedia\033[0m\r\n";
        }
    }
	
	/************************************************************************************************************************
	* Método para leer un artículo de Wikipedia
	*
	*************************************************************************************************************************/
	public function getArticulo($articulo) {
	    $request_vars = array('titles' => $articulo,'maxlag' => '5','format' => 'php','rvprop' => 'content');
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query&prop=revisions",$request_vars);
        $array_=unserialize($this->snoopy->results);
        if(isset($array_["query"]["pages"][-1]["missing"])) { //Comprobamos que existe el artículo
            echo $array_["query"]["pages"][key($array_["query"]["pages"])]["revisions"][0]["*"];
		}
		return $array_;
	}
	
	/************************************************************************************************************************
	* Método para editar un artículo Wikipdia
	*
	*************************************************************************************************************************/
	function setArticulo($articulo,$texto, $resumen){
	    if ($texto == "") { 
		    echo $this->colorRojo." EDICION ERRONEA:".$this->finColor.$this->colorBlancoB." Falta texto para añadir".$this->finColor."\r\n";
		    return false;
		} 
        $request_vars = array('titles' => $articulo, 'maxlag' => '5','format' => 'php','rvprop' => 'content');
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query&prop=revisions",$request_vars);
        $array_ = unserialize($this->snoopy->results);
        if(isset($array_["query"]["pages"][-1]["missing"])) { // Comprobamos que existe el artículo
            //echo $array_["query"]["pages"][key($array_["query"]["pages"])]["revisions"][0]["*"];
		}
        $request_vars = array('action' => 'query', 'prop' => 'info', 
                               'intoken' => 'edit','titles' => $articulo,'format' => 'php');
        if(!$this->snoopy->submit("http://es.wikipedia.org/w/api.php", $request_vars)) {
            die("Snoopy error: {$this->snoopy->error}");
		}
        $array_ = unserialize($this->snoopy->results);

        $vars['token'] =$array_["query"]["pages"][key($array_["query"]["pages"])]["edittoken"];
        $vars['basetimestamp'] = $array_["query"]["pages"][key($array_["query"]["pages"])]["touched"];
        $vars['format'] = 'php';
        $vars['action']='edit';
        $vars['minor']='1';
        $vars['bot']='1';
 
	    $vars['title'] = $articulo;
	    $vars['summary'] = $resumen;
	    $vars['text'] =  $texto;

        if(!$this->snoopy->submit("http://es.wikipedia.org/w/api.php",$vars)) {
	        die("Snoopy error: {$snoopy->error}");
		}
        $array_ = unserialize($this->snoopy->results);
        //var_dump($array_); // Nos dice todo lo que nos ha devuelto Wikipedia
        if($array_["edit"]["result"]=="Success") {
	        echo "\033[1;32m EDICIÓN CORRECTA \033[0m\r\n";
            return true;			
        } else {
	        echo "\033[1;31m EDICION ERRONEA \033[0m\r\n";
			return false;
        }
    }
	/************************************************************************************************************************
	* Método para comprobar un cambio
	*
	*************************************************************************************************************************/
    public function getCambio($texto,$pagina) {
	    $request_vars = array('prop' => 'revisions','titles' => $pagina, 'rvdifftotext' => $texto, 'maxlag' => '5', 'format' => 'php');
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query",$request_vars);
        $array_ = unserialize($this->snoopy->results);
		$dif1 = $array_["query"]["pages"][key($array_["query"]["pages"])]["revisions"][0]["diff"]["*"];
         //var_dump($array_);
		$quitar = array('</tr>','<tr>','<td class="diff-marker">','&#160;','</td>','<td class="diff-addedline">','</del>','<div>','</div>','<td colspan="2" class="diff-empty">','<del class="diffchange diffchange-inline">','<td colspan="2" class="diff-lineno">','<td class="diff-context">');
		
		$cambiar = array(
		'+ \r\n','- \r\n','<td class="diff-deletedline">','<ins class="diffchange diffchange-inline">','</ins>','<td class="diff-addedline">');
		$cambio = array('+','-',$this->colorRosa,$this->colorVerde,$this->finColor,$this->finColor);
        $dif2 = preg_replace('/.td class="diff-context"><div>.*<.div><.td>/','',$dif1);
		
        $dif3 = str_replace($quitar,"",$dif2);
		$dif4 = str_replace($cambiar,$cambio,$dif3);
		$dif5 = preg_replace('/\s*\n/','',$dif4);
		$dif6 = str_replace(" −","\n".$this->finColor.$this->colorRojo."-".$this->finColor,$dif5);
		$dif7 = str_replace(" +","\n".$this->finColor.$this->colorVerde."+".$this->finColor,$dif6);
		$dif = preg_replace("/(Línea \d*):\s*Línea \d*:/","\n".$this->finColor.$this->colorBlancoB." == $1 == ",$dif7);
		//echo $dif;
     return $dif;	
    }
	/************************************************************************************************************************
	* Método para listar artículos que tienen una imagen determinada
	*
	*************************************************************************************************************************/
    public function listImagen($file) {
	    $request_vars = array('iutitle' => $file, 'maxlag' => '5','format' => 'php', 'prop' => 'info');
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query&list=imageusage",$request_vars);
        $array_ = unserialize($this->snoopy->results);
        echo $array_; 
    }
	
	/************************************************************************************************************************
	* Método para listar artículos que tienen una categoría
	*
	*************************************************************************************************************************/
    public function listCat($cat, $continua) {
	    $request_vars = array('gcmtitle' => 'Category:'.$cat, 'maxlag' => '5','format' => 'php','gcmlimit' => '60','gcmcontinue'=>$continua);
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query&generator=categorymembers",$request_vars);
        $array_ = unserialize($this->snoopy->results);
		$lista = $array_['query']['pages'];
		$k = 0;
		foreach($lista as $valor){
		    if (!$valor['ns'] == '14'){//Se omiten subcategorías
		        $listCat[$k] = $valor['title'];
		        $k++;
			}
		}
		//print_r($array_);
		if (array_key_exists('query-continue', $array_ )){
		    $listCat['cont'] = $array_['query-continue']['categorymembers']['gcmcontinue'];
		} else {
		    $listCat['cont'] = false;
		}
        return $listCat; 
    }
	
	/************************************************************************************************************************
	* Método para listar artículos que tienen una plantilla determinada
	*
	*************************************************************************************************************************/
    public function listPlantilla($plantilla,$continua) {

	    if ($continua != ""){
	        $request_vars = array('geititle' => 'Template:'.$plantilla, 'maxlag' => '5','format' => 'php', 'prop' => 'info','geilimit' => '60','geicontinue'=> $continua);
	    } else {
		    $request_vars = array('geititle' => 'Template:'.$plantilla, 'maxlag' => '5','format' => 'php', 'prop' => 'info','geilimit' => '60');
		}
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query&generator=embeddedin",$request_vars);
        $array_ = unserialize($this->snoopy->results);
		$lista = $array_['query']['pages'];
		//unset($continua);
		//$continua = $array_['query-continue']['embeddedin']['geicontinue'];
		//print_r($continua."\r\n");
		$k=0;
		foreach($lista as $valor){
		    if ($valor['ns'] == '0'){//Se omiten subcategorías
		        $listP[$k] = $valor['title'];
		        $k++;
			}
		}
		$listP['cont'] = $array_['query-continue']['embeddedin']['geicontinue'];
        return $listP; 
    }
	
	/************************************************************************************************************************
	* Método para listar artículos que tienen una URL determinada
	*
	*************************************************************************************************************************/
    public function getImage($URL) {
	    $request_vars = array('euquery' => $URL, 'maxlag' => '5','format' => 'php', 'prop' => 'info');
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query&list=exturlusage",$request_vars);
        $array_ = unserialize($this->snoopy->results);
        echo $array_; 
    }
	/************************************************************************************************************************
	* Método para purgar artículos
	*
	*************************************************************************************************************************/
    public function purgar($pagina) {
	    $request_vars = array('titles' => $pagina, 'maxlag' => '5','format' => 'php');
		
        $this->snoopy->submit("https://es.wikipedia.org/w/api.php?action=purge",$request_vars);
        $array_ = unserialize($this->snoopy->results);
        print_r( $array_); 
    }
	/************************************************************************************************************************
	* Método para obtener coordenadas
	*
	*************************************************************************************************************************/
    public function getCoord($pagina) {
	    $request_vars = array('prop' => 'coordinates', 'titles' => $pagina, 'maxlag' => '5','format' => 'php');
		
        $this->snoopy->submit("http://es.wikipedia.org/w/api.php?action=query",$request_vars);
        $array_ = unserialize($this->snoopy->results);
		if (array_key_exists("coordinates",$array_['query']['pages'][key($array_['query']['pages'])])){
		   $coord = $array_['query']['pages'][key($array_['query']['pages'])]['coordinates'][0];   
		} else {
		    $coord = false;
		}
		
        //print_r( $coord); 
		return $coord;
    }
	/************************************************************************************************************************
	* Método para capturar una plantilla en una página y devuelve un string con el código de la plantilla
	*
	*************************************************************************************************************************/
    public function CapturarPlantilla($pagina,$plantilla) {
	    $contenidoPagina = false;
		$numero = 0;
	    while(!$contenidoPagina){
	         $paginaEncontrada = $this->getArticulo($pagina); //Cargamos en una variable el cóntenido de la página como un solo string
			 $contenidoPagina = $paginaEncontrada["query"]["pages"][key($paginaEncontrada["query"]["pages"])]["revisions"][0]["*"];
		}
		
		/* -- Comprobamos que la página contine la plantilla indicada. 
		esto evita que se caiga en caso contrario en un bucle infinito -- */
		if (!preg_match("/\{\{\s*".$plantilla.".*/is",$contenidoPagina)== 1){ 		

			//echo "\033[1;31m Plantilla $plantilla no encontrada en la página $pagina \033[0m\r\n";
			return false;
			
		}
		preg_match_all("/(\{\{\s*?".$plantilla.")/is",$contenidoPagina,$resultados);
		//echo "Resultado encontrados: ".count($resultados[1])."\r\n";
		$iteraciones = count($resultados[1]);
		$plantillaCapturada1 = array();
		
		do{
		    $contenidoPagina = preg_replace("/.*?(\{\{\s*".$plantilla.".*)/is","$1",$contenidoPagina);
            $cont = 0;
			$indice = 0;
			$arrayPagina = str_split($contenidoPagina);
			
			try {
				do {
					/*if (!$arrayPagina[$indice]) {
					    echo " Códigos de cierre erróneos en ".$indice." - cont: ".$cont." - ult car ".$arrayPagina[$indice-1]."\r\n";
					    break;
					} else*/
					if($arrayPagina[$indice] == "{") {
						$cont++;
					} elseif($arrayPagina[$indice] == "}") {
						$cont--;
					}
					$plantillaCapturada1[$indice] = $arrayPagina[$indice];
					$indice++;
				} while(($cont != 0)&&($indice < strlen($contenidoPagina)));;
			} catch(Exception $e){
			echo "Error ".$e;
			return false;
			}
		    
		    $plantillaCapturada = implode($plantillaCapturada1);
			$arrayDevuelto[$numero] = $plantillaCapturada;
			//echo $numero.") ".$plantillaCapturada."\r\n";
			$contenidoPagina = str_replace($plantillaCapturada,"",$contenidoPagina);
			$numero++;
			unset($plantillaCapturada);
			unset($plantillaCapturada1);
		} while ($numero != $iteraciones);
		//($indiceT < $tamanno);	
		
		//print_r($arrayDevuelto);
		return $arrayDevuelto;
		}
	

	/************************************************************************************************************************
	* Método para capturar una plantilla y pasarla a un array
	*
	*************************************************************************************************************************/
    public function getPlantillaInArray($pagina,$plantilla,$limpiar) {
	    $contenidoPagina = false;
        $arrayDevuelto = array();
		$plantillaCapturada = array();
		$plantillaBuscada = $this->CapturarPlantilla($pagina,$plantilla);
		if (!$plantillaBuscada) {
		    return false;
		}
		for ($k = 0; $k < count($plantillaBuscada);$k++) {
		    $enlace = false;
		    $indice = 0;
		    $cont = 2;
		    $contenidoPagina = preg_replace("/\{\{\s*".$plantilla."\s*\|?\s*(.*)/is","$1",$plantillaBuscada[$k]); 
			
			do{
			  /*if (!$contenidoPagina[$indice]) {
					    echo " Códigos de cierre erróneos en ".$indice." - cont: ".$cont." - ult car ".$contenidoPagina[$indice]."\r\n";
					    return false;
			  } else*/
			  if($contenidoPagina[$indice] == "{") {
				  $cont++;
			  } elseif($contenidoPagina[$indice] == "}") {
				  $cont--;
			  } elseif($contenidoPagina[$indice] == "[") {
				  $enlace = true;
			  } elseif($contenidoPagina[$indice] == "]") {
				  $enlace = false;
			  }
			  if(($cont <= 1) && ($contenidoPagina[$indice] == "}")){
				  $plantillaCapturada[$indice] = "";
			  } elseif((($cont >= 3)||($enlace)) && ($contenidoPagina[$indice] == "|")){
				  $plantillaCapturada[$indice] = "&@"; 
			  } else {
				  $plantillaCapturada[$indice] = $contenidoPagina[$indice];
			  }
			  $indice++;
			} while(($cont != 0)&&($indice < strlen($contenidoPagina)));
			
			$plantillaCapturada1 = implode($plantillaCapturada);
			unset($plantillaCapturada);
		    $parametros = explode('|',$plantillaCapturada1);
			//print_r ($parametros);
			$cont = 1;
			for($ki=0; $ki < count($parametros); $ki++){
				if (strstr($parametros[$ki],"=") !== false){ 
				//Parámetros con nombre
					$partes = explode("=",$parametros[$ki],2);
					$clave = trim($partes[0]);
					$valor = str_replace("&@","|",trim($partes[1]));
				} else { 
				// Parámetros ordinales
				   $clave = $cont;
				   $valor = str_replace("&@","|",trim($parametros[$ki]));
				   $cont++;
				}
				if (($valor != "") || (!$limpiar)){
					$arrayPlantilla[$clave] = $valor;
				}
			}
			$arrayDevuelto[$k] = $arrayPlantilla;
			unset($arrayPlantilla);
			unset($plantillaCapturada1);
		}
		//print_r($arrayDevuelto);
		return $arrayDevuelto;
	}	

}
?>
